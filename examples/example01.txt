log from terminal -->
--- example01_s80.asm ---
--------------------------------

; example01_s80 - test correct JUMP
; org 0x00 ; (default)
;
start:
    MVI_A 0b00000111   ; a = 7 (dec)  | 0x07 (hex) 
    MVI_C 0b10101010   ; c = 170 (dec)| 0xAA (hex) 
    MOV_B,A    ; b <= ( a = 7 )
;              
loop1:
    NOP        ; test correct jump
    DCR_A      ; decrement
    JNZ loop1  ; jump if not zero   
loop2:
    MVI_A 0x09 ; a = 9 | 0x09 (hex)
    RLC  
    RLC
    RLC
    RRC
    RRC
    RRC
;    
    MVI_A 0xFF ; 255
    INR_A      ; 255+1 --> C = 1
    INR_A      ; 0+1   --> C = 0
    INR_A      ; 2
    INR_A      ; 3
    ADD_A 255  ; 3+255 = 257-256 = 2
    INR_A
    NOP
    
end.


--------------------------------
[ two- translator ]
0  pc: 0  instr: 0  pc+ 0  p1,p2  
---parts: ['MVI_A', '0b00000111']
1  pc: 2  instr: 0x3e  pc+ 2  p1,p2 0b00000111 
---parts: ['MVI_C', '0b10101010']
2  pc: 4  instr: 0xe  pc+ 2  p1,p2 0b10101010 
---parts: ['MOV_B,A']
3  pc: 5  instr: 0x47  pc+ 1  p1,p2  
4  pc: 5  instr: 0  pc+ 0  p1,p2  
---parts: ['NOP']
5  pc: 6  instr: 0x0  pc+ 1  p1,p2  
---parts: ['DCR_A']
6  pc: 7  instr: 0x3d  pc+ 1  p1,p2  
---parts: ['JNZ', 'loop1']
---jmp---add 0x00
7  pc: 10  instr: 0xc2  pc+ 3  p1,p2 loop1 
8  pc: 10  instr: 0  pc+ 0  p1,p2  
---parts: ['MVI_A', '0x09']
9  pc: 12  instr: 0x3e  pc+ 2  p1,p2 0x09 
---parts: ['RLC']
10  pc: 13  instr: 0x7  pc+ 1  p1,p2  
---parts: ['RLC']
11  pc: 14  instr: 0x7  pc+ 1  p1,p2  
---parts: ['RLC']
12  pc: 15  instr: 0x7  pc+ 1  p1,p2  
---parts: ['RRC']
13  pc: 16  instr: 0xf  pc+ 1  p1,p2  
---parts: ['RRC']
14  pc: 17  instr: 0xf  pc+ 1  p1,p2  
---parts: ['RRC']
15  pc: 18  instr: 0xf  pc+ 1  p1,p2  
---parts: ['MVI_A', '0xFF']
16  pc: 20  instr: 0x3e  pc+ 2  p1,p2 0xFF 
---parts: ['INR_A']
17  pc: 21  instr: 0x3c  pc+ 1  p1,p2  
---parts: ['INR_A']
18  pc: 22  instr: 0x3c  pc+ 1  p1,p2  
---parts: ['INR_A']
19  pc: 23  instr: 0x3c  pc+ 1  p1,p2  
---parts: ['INR_A']
20  pc: 24  instr: 0x3c  pc+ 1  p1,p2  
---parts: ['ADD_A', '255']
21  pc: 26  instr: 0x87  pc+ 2  p1,p2 255 
---parts: ['INR_A']
22  pc: 27  instr: 0x3c  pc+ 1  p1,p2  
---parts: ['NOP']
23  pc: 28  instr: 0x0  pc+ 1  p1,p2  
24  pc: 28  instr: 0  pc+ 0  p1,p2  
- temp_labels: {'loop2:': 10, 'loop1:': 5, 'start:': 0}
- temp_prog. : ['0x3e', '0b00000111', '0xe', '0b10101010', '0x47', '0x0', '0x3d', '0xc2', 0, 'loop1', '0x3e', '0x09', '0x7', '0x7', '0x7', '0xf', '0xf', '0xf', '0x3e', '0xFF', '0x3c', '0x3c', '0x3c', '0x3c', '0x87', '255', '0x3c', '0x0']
[ the second  replaces labels with addr. ]
---label--- loop1: 5
loop1 <--- 5
- program_num [62, 7, 14, 170, 71, 0, 61, 194, 0, 5, 62, 9, 7, 7, 7, 15, 15, 15, 62, 255, 60, 60, 60, 60, 135, 255, 60, 0]
--------------------------------
- len(instr_set): 28
================================
0 {1} 3e   MVI_A 0x7
                      --->#1 |S0 Z0 C0| 00000111 | 7, 0x7 2 
2 {1} 0e   MVI_C 0xaa
                      --->#2 |S0 Z0 C0| 00000111 | 7, 0x7 4 
4 {0} 47   MOV_B,A
                      --->#3 |S0 Z0 C0| 00000111 | 7, 0x7 5 
5 {0} 00   NOP
                      --->#4 |S0 Z0 C0| 00000111 | 7, 0x7 6 
6 {0} 3d   DCR_A
                      --->#5 |S0 Z0 C0| 00000110 | 6, 0x6 7 
7 {2} c2   JNZ 00 05
                      --->#6 |S0 Z0 C0| 00000110 | 6, 0x6 5 
5 {0} 00   NOP
                      --->#7 |S0 Z0 C0| 00000110 | 6, 0x6 6 
6 {0} 3d   DCR_A
                      --->#8 |S0 Z0 C0| 00000101 | 5, 0x5 7 
7 {2} c2   JNZ 00 05
                      --->#9 |S0 Z0 C0| 00000101 | 5, 0x5 5 
5 {0} 00   NOP
                      --->#10 |S0 Z0 C0| 00000101 | 5, 0x5 6 
6 {0} 3d   DCR_A
                      --->#11 |S0 Z0 C0| 00000100 | 4, 0x4 7 
7 {2} c2   JNZ 00 05
                      --->#12 |S0 Z0 C0| 00000100 | 4, 0x4 5 
5 {0} 00   NOP
                      --->#13 |S0 Z0 C0| 00000100 | 4, 0x4 6 
6 {0} 3d   DCR_A
                      --->#14 |S0 Z0 C0| 00000011 | 3, 0x3 7 
7 {2} c2   JNZ 00 05
                      --->#15 |S0 Z0 C0| 00000011 | 3, 0x3 5 
5 {0} 00   NOP
                      --->#16 |S0 Z0 C0| 00000011 | 3, 0x3 6 
6 {0} 3d   DCR_A
                      --->#17 |S0 Z0 C0| 00000010 | 2, 0x2 7 
7 {2} c2   JNZ 00 05
                      --->#18 |S0 Z0 C0| 00000010 | 2, 0x2 5 
5 {0} 00   NOP
                      --->#19 |S0 Z0 C0| 00000010 | 2, 0x2 6 
6 {0} 3d   DCR_A
                      --->#20 |S0 Z0 C0| 00000001 | 1, 0x1 7 
7 {2} c2   JNZ 00 05
                      --->#21 |S0 Z0 C0| 00000001 | 1, 0x1 5 
5 {0} 00   NOP
                      --->#22 |S0 Z0 C0| 00000001 | 1, 0x1 6 
6 {0} 3d   DCR_A
                      --->#23 |S0 Z1 C0| 00000000 | 0, 0x0 7 
7 {2} c2   JNZ 00 05
                      --->#24 |S0 Z1 C0| 00000000 | 0, 0x0 10 
10 {1} 3e   MVI_A 0x9
                      --->#25 |S0 Z0 C0| 00001001 | 9, 0x9 12 
12 {0} 07   RLC
                      --->#26 |S0 Z0 C0| 00010010 | 18, 0x12 13 
13 {0} 07   RLC
                      --->#27 |S0 Z0 C0| 00100100 | 36, 0x24 14 
14 {0} 07   RLC
                      --->#28 |S0 Z0 C0| 01001000 | 72, 0x48 15 
15 {0} 0f   RRC
                      --->#29 |S0 Z0 C0| 00100100 | 36, 0x24 16 
16 {0} 0f   RRC
                      --->#30 |S0 Z0 C0| 00010010 | 18, 0x12 17 
17 {0} 0f   RRC
                      --->#31 |S0 Z0 C0| 00001001 | 9, 0x9 18 
18 {1} 3e   MVI_A 0xff
                      --->#32 |S0 Z0 C0| 11111111 | 255, 0xff 20 
20 {0} 3c   INR_A
                      --->#33 |S0 Z1 C1| 00000000 | 0, 0x0 21 
21 {0} 3c   INR_A
                      --->#34 |S0 Z0 C0| 00000001 | 1, 0x1 22 
22 {0} 3c   INR_A
                      --->#35 |S0 Z0 C0| 00000010 | 2, 0x2 23 
23 {0} 3c   INR_A
                      --->#36 |S0 Z0 C0| 00000011 | 3, 0x3 24 
24 {1} 87   ADD_A 0xff
                      --->#37 |S0 Z0 C1| 00000010 | 2, 0x2 26 
26 {0} 3c   INR_A
                      --->#38 |S0 Z0 C0| 00000011 | 3, 0x3 27 
27 {0} 00   NOP
                      --->#39 |S0 Z0 C0| 00000011 | 3, 0x3 28 
.:. function:  run_hex_code
--> duration (milis.) --> 290

--------------------------------
mem_free: 39216
================================
[ system registers ]
a: 3 0x3 0b11
b: 7  | c: 170
h: 0  | l: 0
--------------------------------
|S|Z|0|C|0|P|1|C|
|0|0|0|0|0|0|1|0|
================================
[ virtual memory ] - (16/32 bytes)
[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
--- hexa:
0x0 0x0 0x0 0x0 0x0 0x0 0x0 0x0 0x0 0x0 0x0 0x0 0x0 0x0 0x0 0x0 
--- string:

================================
asm file name: example01_s80.asm
core_s80 ver. 0.5